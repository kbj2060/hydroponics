// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  authPayload: (where?: AuthPayloadWhereInput) => Promise<boolean>;
  figure: (where?: FigureWhereInput) => Promise<boolean>;
  switch: (where?: SwitchWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  authPayload: (
    where: AuthPayloadWhereUniqueInput
  ) => AuthPayloadNullablePromise;
  authPayloads: (args?: {
    where?: AuthPayloadWhereInput;
    orderBy?: AuthPayloadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AuthPayload>;
  authPayloadsConnection: (args?: {
    where?: AuthPayloadWhereInput;
    orderBy?: AuthPayloadOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AuthPayloadConnectionPromise;
  figure: (where: FigureWhereUniqueInput) => FigureNullablePromise;
  figures: (args?: {
    where?: FigureWhereInput;
    orderBy?: FigureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Figure>;
  figuresConnection: (args?: {
    where?: FigureWhereInput;
    orderBy?: FigureOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FigureConnectionPromise;
  switch: (where: SwitchWhereUniqueInput) => SwitchNullablePromise;
  switches: (args?: {
    where?: SwitchWhereInput;
    orderBy?: SwitchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Switch>;
  switchesConnection: (args?: {
    where?: SwitchWhereInput;
    orderBy?: SwitchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SwitchConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAuthPayload: (data: AuthPayloadCreateInput) => AuthPayloadPromise;
  updateAuthPayload: (args: {
    data: AuthPayloadUpdateInput;
    where: AuthPayloadWhereUniqueInput;
  }) => AuthPayloadPromise;
  updateManyAuthPayloads: (args: {
    data: AuthPayloadUpdateManyMutationInput;
    where?: AuthPayloadWhereInput;
  }) => BatchPayloadPromise;
  upsertAuthPayload: (args: {
    where: AuthPayloadWhereUniqueInput;
    create: AuthPayloadCreateInput;
    update: AuthPayloadUpdateInput;
  }) => AuthPayloadPromise;
  deleteAuthPayload: (where: AuthPayloadWhereUniqueInput) => AuthPayloadPromise;
  deleteManyAuthPayloads: (
    where?: AuthPayloadWhereInput
  ) => BatchPayloadPromise;
  createFigure: (data: FigureCreateInput) => FigurePromise;
  updateFigure: (args: {
    data: FigureUpdateInput;
    where: FigureWhereUniqueInput;
  }) => FigurePromise;
  updateManyFigures: (args: {
    data: FigureUpdateManyMutationInput;
    where?: FigureWhereInput;
  }) => BatchPayloadPromise;
  upsertFigure: (args: {
    where: FigureWhereUniqueInput;
    create: FigureCreateInput;
    update: FigureUpdateInput;
  }) => FigurePromise;
  deleteFigure: (where: FigureWhereUniqueInput) => FigurePromise;
  deleteManyFigures: (where?: FigureWhereInput) => BatchPayloadPromise;
  createSwitch: (data: SwitchCreateInput) => SwitchPromise;
  updateSwitch: (args: {
    data: SwitchUpdateInput;
    where: SwitchWhereUniqueInput;
  }) => SwitchPromise;
  updateManySwitches: (args: {
    data: SwitchUpdateManyMutationInput;
    where?: SwitchWhereInput;
  }) => BatchPayloadPromise;
  upsertSwitch: (args: {
    where: SwitchWhereUniqueInput;
    create: SwitchCreateInput;
    update: SwitchUpdateInput;
  }) => SwitchPromise;
  deleteSwitch: (where: SwitchWhereUniqueInput) => SwitchPromise;
  deleteManySwitches: (where?: SwitchWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  authPayload: (
    where?: AuthPayloadSubscriptionWhereInput
  ) => AuthPayloadSubscriptionPayloadSubscription;
  figure: (
    where?: FigureSubscriptionWhereInput
  ) => FigureSubscriptionPayloadSubscription;
  switch: (
    where?: SwitchSubscriptionWhereInput
  ) => SwitchSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SwitchFormat = "FAN" | "HUMIDIFIER" | "LED";

export type SwitchOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "machine_ASC"
  | "machine_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "status_ASC"
  | "status_DESC";

export type AuthPayloadOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "token_ASC"
  | "token_DESC";

export type measurementFormat = "LUX" | "HUM" | "TEMP" | "CO2" | "PH" | "EC";

export type FigureOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "value_ASC"
  | "value_DESC"
  | "measurement_ASC"
  | "measurement_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AuthPayloadWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SwitchWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  machine?: Maybe<SwitchFormat>;
  machine_not?: Maybe<SwitchFormat>;
  machine_in?: Maybe<SwitchFormat[] | SwitchFormat>;
  machine_not_in?: Maybe<SwitchFormat[] | SwitchFormat>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  controledBy?: Maybe<UserWhereInput>;
  AND?: Maybe<SwitchWhereInput[] | SwitchWhereInput>;
  OR?: Maybe<SwitchWhereInput[] | SwitchWhereInput>;
  NOT?: Maybe<SwitchWhereInput[] | SwitchWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  switches_every?: Maybe<SwitchWhereInput>;
  switches_some?: Maybe<SwitchWhereInput>;
  switches_none?: Maybe<SwitchWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface AuthPayloadWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  token?: Maybe<String>;
  token_not?: Maybe<String>;
  token_in?: Maybe<String[] | String>;
  token_not_in?: Maybe<String[] | String>;
  token_lt?: Maybe<String>;
  token_lte?: Maybe<String>;
  token_gt?: Maybe<String>;
  token_gte?: Maybe<String>;
  token_contains?: Maybe<String>;
  token_not_contains?: Maybe<String>;
  token_starts_with?: Maybe<String>;
  token_not_starts_with?: Maybe<String>;
  token_ends_with?: Maybe<String>;
  token_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<AuthPayloadWhereInput[] | AuthPayloadWhereInput>;
  OR?: Maybe<AuthPayloadWhereInput[] | AuthPayloadWhereInput>;
  NOT?: Maybe<AuthPayloadWhereInput[] | AuthPayloadWhereInput>;
}

export type FigureWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FigureWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  value?: Maybe<Float>;
  value_not?: Maybe<Float>;
  value_in?: Maybe<Float[] | Float>;
  value_not_in?: Maybe<Float[] | Float>;
  value_lt?: Maybe<Float>;
  value_lte?: Maybe<Float>;
  value_gt?: Maybe<Float>;
  value_gte?: Maybe<Float>;
  measurement?: Maybe<measurementFormat>;
  measurement_not?: Maybe<measurementFormat>;
  measurement_in?: Maybe<measurementFormat[] | measurementFormat>;
  measurement_not_in?: Maybe<measurementFormat[] | measurementFormat>;
  AND?: Maybe<FigureWhereInput[] | FigureWhereInput>;
  OR?: Maybe<FigureWhereInput[] | FigureWhereInput>;
  NOT?: Maybe<FigureWhereInput[] | FigureWhereInput>;
}

export type SwitchWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface AuthPayloadCreateInput {
  id?: Maybe<ID_Input>;
  token?: Maybe<String>;
  user?: Maybe<UserCreateOneInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  password: String;
  switches?: Maybe<SwitchCreateManyWithoutControledByInput>;
}

export interface SwitchCreateManyWithoutControledByInput {
  create?: Maybe<
    SwitchCreateWithoutControledByInput[] | SwitchCreateWithoutControledByInput
  >;
  connect?: Maybe<SwitchWhereUniqueInput[] | SwitchWhereUniqueInput>;
}

export interface SwitchCreateWithoutControledByInput {
  id?: Maybe<ID_Input>;
  machine: SwitchFormat;
  status: Boolean;
}

export interface AuthPayloadUpdateInput {
  token?: Maybe<String>;
  user?: Maybe<UserUpdateOneInput>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  switches?: Maybe<SwitchUpdateManyWithoutControledByInput>;
}

export interface SwitchUpdateManyWithoutControledByInput {
  create?: Maybe<
    SwitchCreateWithoutControledByInput[] | SwitchCreateWithoutControledByInput
  >;
  delete?: Maybe<SwitchWhereUniqueInput[] | SwitchWhereUniqueInput>;
  connect?: Maybe<SwitchWhereUniqueInput[] | SwitchWhereUniqueInput>;
  set?: Maybe<SwitchWhereUniqueInput[] | SwitchWhereUniqueInput>;
  disconnect?: Maybe<SwitchWhereUniqueInput[] | SwitchWhereUniqueInput>;
  update?: Maybe<
    | SwitchUpdateWithWhereUniqueWithoutControledByInput[]
    | SwitchUpdateWithWhereUniqueWithoutControledByInput
  >;
  upsert?: Maybe<
    | SwitchUpsertWithWhereUniqueWithoutControledByInput[]
    | SwitchUpsertWithWhereUniqueWithoutControledByInput
  >;
  deleteMany?: Maybe<SwitchScalarWhereInput[] | SwitchScalarWhereInput>;
  updateMany?: Maybe<
    | SwitchUpdateManyWithWhereNestedInput[]
    | SwitchUpdateManyWithWhereNestedInput
  >;
}

export interface SwitchUpdateWithWhereUniqueWithoutControledByInput {
  where: SwitchWhereUniqueInput;
  data: SwitchUpdateWithoutControledByDataInput;
}

export interface SwitchUpdateWithoutControledByDataInput {
  machine?: Maybe<SwitchFormat>;
  status?: Maybe<Boolean>;
}

export interface SwitchUpsertWithWhereUniqueWithoutControledByInput {
  where: SwitchWhereUniqueInput;
  update: SwitchUpdateWithoutControledByDataInput;
  create: SwitchCreateWithoutControledByInput;
}

export interface SwitchScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  machine?: Maybe<SwitchFormat>;
  machine_not?: Maybe<SwitchFormat>;
  machine_in?: Maybe<SwitchFormat[] | SwitchFormat>;
  machine_not_in?: Maybe<SwitchFormat[] | SwitchFormat>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  AND?: Maybe<SwitchScalarWhereInput[] | SwitchScalarWhereInput>;
  OR?: Maybe<SwitchScalarWhereInput[] | SwitchScalarWhereInput>;
  NOT?: Maybe<SwitchScalarWhereInput[] | SwitchScalarWhereInput>;
}

export interface SwitchUpdateManyWithWhereNestedInput {
  where: SwitchScalarWhereInput;
  data: SwitchUpdateManyDataInput;
}

export interface SwitchUpdateManyDataInput {
  machine?: Maybe<SwitchFormat>;
  status?: Maybe<Boolean>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AuthPayloadUpdateManyMutationInput {
  token?: Maybe<String>;
}

export interface FigureCreateInput {
  id?: Maybe<ID_Input>;
  value: Float;
  measurement: measurementFormat;
}

export interface FigureUpdateInput {
  value?: Maybe<Float>;
  measurement?: Maybe<measurementFormat>;
}

export interface FigureUpdateManyMutationInput {
  value?: Maybe<Float>;
  measurement?: Maybe<measurementFormat>;
}

export interface SwitchCreateInput {
  id?: Maybe<ID_Input>;
  machine: SwitchFormat;
  status: Boolean;
  controledBy?: Maybe<UserCreateOneWithoutSwitchesInput>;
}

export interface UserCreateOneWithoutSwitchesInput {
  create?: Maybe<UserCreateWithoutSwitchesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutSwitchesInput {
  id?: Maybe<ID_Input>;
  name: String;
  password: String;
}

export interface SwitchUpdateInput {
  machine?: Maybe<SwitchFormat>;
  status?: Maybe<Boolean>;
  controledBy?: Maybe<UserUpdateOneWithoutSwitchesInput>;
}

export interface UserUpdateOneWithoutSwitchesInput {
  create?: Maybe<UserCreateWithoutSwitchesInput>;
  update?: Maybe<UserUpdateWithoutSwitchesDataInput>;
  upsert?: Maybe<UserUpsertWithoutSwitchesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutSwitchesDataInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertWithoutSwitchesInput {
  update: UserUpdateWithoutSwitchesDataInput;
  create: UserCreateWithoutSwitchesInput;
}

export interface SwitchUpdateManyMutationInput {
  machine?: Maybe<SwitchFormat>;
  status?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
  switches?: Maybe<SwitchUpdateManyWithoutControledByInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface AuthPayloadSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AuthPayloadWhereInput>;
  AND?: Maybe<
    AuthPayloadSubscriptionWhereInput[] | AuthPayloadSubscriptionWhereInput
  >;
  OR?: Maybe<
    AuthPayloadSubscriptionWhereInput[] | AuthPayloadSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AuthPayloadSubscriptionWhereInput[] | AuthPayloadSubscriptionWhereInput
  >;
}

export interface FigureSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FigureWhereInput>;
  AND?: Maybe<FigureSubscriptionWhereInput[] | FigureSubscriptionWhereInput>;
  OR?: Maybe<FigureSubscriptionWhereInput[] | FigureSubscriptionWhereInput>;
  NOT?: Maybe<FigureSubscriptionWhereInput[] | FigureSubscriptionWhereInput>;
}

export interface SwitchSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SwitchWhereInput>;
  AND?: Maybe<SwitchSubscriptionWhereInput[] | SwitchSubscriptionWhereInput>;
  OR?: Maybe<SwitchSubscriptionWhereInput[] | SwitchSubscriptionWhereInput>;
  NOT?: Maybe<SwitchSubscriptionWhereInput[] | SwitchSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AuthPayload {
  id: ID_Output;
  token?: String;
}

export interface AuthPayloadPromise extends Promise<AuthPayload>, Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface AuthPayloadSubscription
  extends Promise<AsyncIterator<AuthPayload>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface AuthPayloadNullablePromise
  extends Promise<AuthPayload | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  switches: <T = FragmentableArray<Switch>>(args?: {
    where?: SwitchWhereInput;
    orderBy?: SwitchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  switches: <T = Promise<AsyncIterator<SwitchSubscription>>>(args?: {
    where?: SwitchWhereInput;
    orderBy?: SwitchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  switches: <T = FragmentableArray<Switch>>(args?: {
    where?: SwitchWhereInput;
    orderBy?: SwitchOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Switch {
  id: ID_Output;
  machine: SwitchFormat;
  updatedAt?: DateTimeOutput;
  status: Boolean;
}

export interface SwitchPromise extends Promise<Switch>, Fragmentable {
  id: () => Promise<ID_Output>;
  machine: () => Promise<SwitchFormat>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
  controledBy: <T = UserPromise>() => T;
}

export interface SwitchSubscription
  extends Promise<AsyncIterator<Switch>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  machine: () => Promise<AsyncIterator<SwitchFormat>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  controledBy: <T = UserSubscription>() => T;
}

export interface SwitchNullablePromise
  extends Promise<Switch | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  machine: () => Promise<SwitchFormat>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
  controledBy: <T = UserPromise>() => T;
}

export interface AuthPayloadConnection {
  pageInfo: PageInfo;
  edges: AuthPayloadEdge[];
}

export interface AuthPayloadConnectionPromise
  extends Promise<AuthPayloadConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthPayloadEdge>>() => T;
  aggregate: <T = AggregateAuthPayloadPromise>() => T;
}

export interface AuthPayloadConnectionSubscription
  extends Promise<AsyncIterator<AuthPayloadConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthPayloadEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthPayloadSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AuthPayloadEdge {
  node: AuthPayload;
  cursor: String;
}

export interface AuthPayloadEdgePromise
  extends Promise<AuthPayloadEdge>,
    Fragmentable {
  node: <T = AuthPayloadPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthPayloadEdgeSubscription
  extends Promise<AsyncIterator<AuthPayloadEdge>>,
    Fragmentable {
  node: <T = AuthPayloadSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuthPayload {
  count: Int;
}

export interface AggregateAuthPayloadPromise
  extends Promise<AggregateAuthPayload>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthPayloadSubscription
  extends Promise<AsyncIterator<AggregateAuthPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Figure {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  value: Float;
  measurement: measurementFormat;
}

export interface FigurePromise extends Promise<Figure>, Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  measurement: () => Promise<measurementFormat>;
}

export interface FigureSubscription
  extends Promise<AsyncIterator<Figure>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  measurement: () => Promise<AsyncIterator<measurementFormat>>;
}

export interface FigureNullablePromise
  extends Promise<Figure | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  measurement: () => Promise<measurementFormat>;
}

export interface FigureConnection {
  pageInfo: PageInfo;
  edges: FigureEdge[];
}

export interface FigureConnectionPromise
  extends Promise<FigureConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FigureEdge>>() => T;
  aggregate: <T = AggregateFigurePromise>() => T;
}

export interface FigureConnectionSubscription
  extends Promise<AsyncIterator<FigureConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FigureEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFigureSubscription>() => T;
}

export interface FigureEdge {
  node: Figure;
  cursor: String;
}

export interface FigureEdgePromise extends Promise<FigureEdge>, Fragmentable {
  node: <T = FigurePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FigureEdgeSubscription
  extends Promise<AsyncIterator<FigureEdge>>,
    Fragmentable {
  node: <T = FigureSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFigure {
  count: Int;
}

export interface AggregateFigurePromise
  extends Promise<AggregateFigure>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFigureSubscription
  extends Promise<AsyncIterator<AggregateFigure>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SwitchConnection {
  pageInfo: PageInfo;
  edges: SwitchEdge[];
}

export interface SwitchConnectionPromise
  extends Promise<SwitchConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SwitchEdge>>() => T;
  aggregate: <T = AggregateSwitchPromise>() => T;
}

export interface SwitchConnectionSubscription
  extends Promise<AsyncIterator<SwitchConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SwitchEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSwitchSubscription>() => T;
}

export interface SwitchEdge {
  node: Switch;
  cursor: String;
}

export interface SwitchEdgePromise extends Promise<SwitchEdge>, Fragmentable {
  node: <T = SwitchPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SwitchEdgeSubscription
  extends Promise<AsyncIterator<SwitchEdge>>,
    Fragmentable {
  node: <T = SwitchSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSwitch {
  count: Int;
}

export interface AggregateSwitchPromise
  extends Promise<AggregateSwitch>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSwitchSubscription
  extends Promise<AsyncIterator<AggregateSwitch>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AuthPayloadSubscriptionPayload {
  mutation: MutationType;
  node: AuthPayload;
  updatedFields: String[];
  previousValues: AuthPayloadPreviousValues;
}

export interface AuthPayloadSubscriptionPayloadPromise
  extends Promise<AuthPayloadSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthPayloadPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthPayloadPreviousValuesPromise>() => T;
}

export interface AuthPayloadSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthPayloadSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthPayloadSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthPayloadPreviousValuesSubscription>() => T;
}

export interface AuthPayloadPreviousValues {
  id: ID_Output;
  token?: String;
}

export interface AuthPayloadPreviousValuesPromise
  extends Promise<AuthPayloadPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  token: () => Promise<String>;
}

export interface AuthPayloadPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthPayloadPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  token: () => Promise<AsyncIterator<String>>;
}

export interface FigureSubscriptionPayload {
  mutation: MutationType;
  node: Figure;
  updatedFields: String[];
  previousValues: FigurePreviousValues;
}

export interface FigureSubscriptionPayloadPromise
  extends Promise<FigureSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FigurePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FigurePreviousValuesPromise>() => T;
}

export interface FigureSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FigureSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FigureSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FigurePreviousValuesSubscription>() => T;
}

export interface FigurePreviousValues {
  id: ID_Output;
  updatedAt: DateTimeOutput;
  value: Float;
  measurement: measurementFormat;
}

export interface FigurePreviousValuesPromise
  extends Promise<FigurePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  updatedAt: () => Promise<DateTimeOutput>;
  value: () => Promise<Float>;
  measurement: () => Promise<measurementFormat>;
}

export interface FigurePreviousValuesSubscription
  extends Promise<AsyncIterator<FigurePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Float>>;
  measurement: () => Promise<AsyncIterator<measurementFormat>>;
}

export interface SwitchSubscriptionPayload {
  mutation: MutationType;
  node: Switch;
  updatedFields: String[];
  previousValues: SwitchPreviousValues;
}

export interface SwitchSubscriptionPayloadPromise
  extends Promise<SwitchSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SwitchPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SwitchPreviousValuesPromise>() => T;
}

export interface SwitchSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SwitchSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SwitchSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SwitchPreviousValuesSubscription>() => T;
}

export interface SwitchPreviousValues {
  id: ID_Output;
  machine: SwitchFormat;
  updatedAt?: DateTimeOutput;
  status: Boolean;
}

export interface SwitchPreviousValuesPromise
  extends Promise<SwitchPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  machine: () => Promise<SwitchFormat>;
  updatedAt: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
}

export interface SwitchPreviousValuesSubscription
  extends Promise<AsyncIterator<SwitchPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  machine: () => Promise<AsyncIterator<SwitchFormat>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  password: String;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "measurementFormat",
    embedded: false
  },
  {
    name: "SwitchFormat",
    embedded: false
  },
  {
    name: "Figure",
    embedded: false
  },
  {
    name: "AuthPayload",
    embedded: false
  },
  {
    name: "Switch",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
