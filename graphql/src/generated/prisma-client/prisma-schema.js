module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAuthPayload {
  count: Int!
}

type AggregateFigure {
  count: Int!
}

type AggregateSetting {
  count: Int!
}

type AggregateSettingRange {
  count: Int!
}

type AggregateSwitch {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  id: ID!
  token: String
  user: User
}

type AuthPayloadConnection {
  pageInfo: PageInfo!
  edges: [AuthPayloadEdge]!
  aggregate: AggregateAuthPayload!
}

input AuthPayloadCreateInput {
  id: ID
  token: String
  user: UserCreateOneInput
}

type AuthPayloadEdge {
  node: AuthPayload!
  cursor: String!
}

enum AuthPayloadOrderByInput {
  id_ASC
  id_DESC
  token_ASC
  token_DESC
}

type AuthPayloadPreviousValues {
  id: ID!
  token: String
}

type AuthPayloadSubscriptionPayload {
  mutation: MutationType!
  node: AuthPayload
  updatedFields: [String!]
  previousValues: AuthPayloadPreviousValues
}

input AuthPayloadSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthPayloadWhereInput
  AND: [AuthPayloadSubscriptionWhereInput!]
  OR: [AuthPayloadSubscriptionWhereInput!]
  NOT: [AuthPayloadSubscriptionWhereInput!]
}

input AuthPayloadUpdateInput {
  token: String
  user: UserUpdateOneInput
}

input AuthPayloadUpdateManyMutationInput {
  token: String
}

input AuthPayloadWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  user: UserWhereInput
  AND: [AuthPayloadWhereInput!]
  OR: [AuthPayloadWhereInput!]
  NOT: [AuthPayloadWhereInput!]
}

input AuthPayloadWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Figure {
  id: ID!
  updatedAt: DateTime!
  value: Float!
  measurement: MeasurementFormat!
}

type FigureConnection {
  pageInfo: PageInfo!
  edges: [FigureEdge]!
  aggregate: AggregateFigure!
}

input FigureCreateInput {
  id: ID
  value: Float!
  measurement: MeasurementFormat!
}

type FigureEdge {
  node: Figure!
  cursor: String!
}

enum FigureOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
  measurement_ASC
  measurement_DESC
}

type FigurePreviousValues {
  id: ID!
  updatedAt: DateTime!
  value: Float!
  measurement: MeasurementFormat!
}

type FigureSubscriptionPayload {
  mutation: MutationType!
  node: Figure
  updatedFields: [String!]
  previousValues: FigurePreviousValues
}

input FigureSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FigureWhereInput
  AND: [FigureSubscriptionWhereInput!]
  OR: [FigureSubscriptionWhereInput!]
  NOT: [FigureSubscriptionWhereInput!]
}

input FigureUpdateInput {
  value: Float
  measurement: MeasurementFormat
}

input FigureUpdateManyMutationInput {
  value: Float
  measurement: MeasurementFormat
}

input FigureWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  value: Float
  value_not: Float
  value_in: [Float!]
  value_not_in: [Float!]
  value_lt: Float
  value_lte: Float
  value_gt: Float
  value_gte: Float
  measurement: MeasurementFormat
  measurement_not: MeasurementFormat
  measurement_in: [MeasurementFormat!]
  measurement_not_in: [MeasurementFormat!]
  AND: [FigureWhereInput!]
  OR: [FigureWhereInput!]
  NOT: [FigureWhereInput!]
}

input FigureWhereUniqueInput {
  id: ID
}

scalar Long

enum MeasurementFormat {
  LUX
  HUM
  TEMP
  CO2
  PH
  EC
}

type Mutation {
  createAuthPayload(data: AuthPayloadCreateInput!): AuthPayload!
  updateAuthPayload(data: AuthPayloadUpdateInput!, where: AuthPayloadWhereUniqueInput!): AuthPayload
  updateManyAuthPayloads(data: AuthPayloadUpdateManyMutationInput!, where: AuthPayloadWhereInput): BatchPayload!
  upsertAuthPayload(where: AuthPayloadWhereUniqueInput!, create: AuthPayloadCreateInput!, update: AuthPayloadUpdateInput!): AuthPayload!
  deleteAuthPayload(where: AuthPayloadWhereUniqueInput!): AuthPayload
  deleteManyAuthPayloads(where: AuthPayloadWhereInput): BatchPayload!
  createFigure(data: FigureCreateInput!): Figure!
  updateFigure(data: FigureUpdateInput!, where: FigureWhereUniqueInput!): Figure
  updateManyFigures(data: FigureUpdateManyMutationInput!, where: FigureWhereInput): BatchPayload!
  upsertFigure(where: FigureWhereUniqueInput!, create: FigureCreateInput!, update: FigureUpdateInput!): Figure!
  deleteFigure(where: FigureWhereUniqueInput!): Figure
  deleteManyFigures(where: FigureWhereInput): BatchPayload!
  createSetting(data: SettingCreateInput!): Setting!
  updateSetting(data: SettingUpdateInput!, where: SettingWhereUniqueInput!): Setting
  upsertSetting(where: SettingWhereUniqueInput!, create: SettingCreateInput!, update: SettingUpdateInput!): Setting!
  deleteSetting(where: SettingWhereUniqueInput!): Setting
  deleteManySettings(where: SettingWhereInput): BatchPayload!
  createSettingRange(data: SettingRangeCreateInput!): SettingRange!
  updateSettingRange(data: SettingRangeUpdateInput!, where: SettingRangeWhereUniqueInput!): SettingRange
  updateManySettingRanges(data: SettingRangeUpdateManyMutationInput!, where: SettingRangeWhereInput): BatchPayload!
  upsertSettingRange(where: SettingRangeWhereUniqueInput!, create: SettingRangeCreateInput!, update: SettingRangeUpdateInput!): SettingRange!
  deleteSettingRange(where: SettingRangeWhereUniqueInput!): SettingRange
  deleteManySettingRanges(where: SettingRangeWhereInput): BatchPayload!
  createSwitch(data: SwitchCreateInput!): Switch!
  updateSwitch(data: SwitchUpdateInput!, where: SwitchWhereUniqueInput!): Switch
  updateManySwitches(data: SwitchUpdateManyMutationInput!, where: SwitchWhereInput): BatchPayload!
  upsertSwitch(where: SwitchWhereUniqueInput!, create: SwitchCreateInput!, update: SwitchUpdateInput!): Switch!
  deleteSwitch(where: SwitchWhereUniqueInput!): Switch
  deleteManySwitches(where: SwitchWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  authPayload(where: AuthPayloadWhereUniqueInput!): AuthPayload
  authPayloads(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthPayload]!
  authPayloadsConnection(where: AuthPayloadWhereInput, orderBy: AuthPayloadOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthPayloadConnection!
  figure(where: FigureWhereUniqueInput!): Figure
  figures(where: FigureWhereInput, orderBy: FigureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Figure]!
  figuresConnection(where: FigureWhereInput, orderBy: FigureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FigureConnection!
  setting(where: SettingWhereUniqueInput!): Setting
  settings(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Setting]!
  settingsConnection(where: SettingWhereInput, orderBy: SettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SettingConnection!
  settingRange(where: SettingRangeWhereUniqueInput!): SettingRange
  settingRanges(where: SettingRangeWhereInput, orderBy: SettingRangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SettingRange]!
  settingRangesConnection(where: SettingRangeWhereInput, orderBy: SettingRangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SettingRangeConnection!
  switch(where: SwitchWhereUniqueInput!): Switch
  switches(where: SwitchWhereInput, orderBy: SwitchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Switch]!
  switchesConnection(where: SwitchWhereInput, orderBy: SwitchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SwitchConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Setting {
  id: ID!
  subjects(where: SettingRangeWhereInput, orderBy: SettingRangeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SettingRange!]
  appliedBy: User!
  updatedAt: DateTime!
}

type SettingConnection {
  pageInfo: PageInfo!
  edges: [SettingEdge]!
  aggregate: AggregateSetting!
}

input SettingCreateInput {
  id: ID
  subjects: SettingRangeCreateManyInput
  appliedBy: UserCreateOneInput!
}

type SettingEdge {
  node: Setting!
  cursor: String!
}

enum SettingOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SettingPreviousValues {
  id: ID!
  updatedAt: DateTime!
}

type SettingRange {
  id: ID!
  measurement: MeasurementFormat!
  min: Float!
  max: Float!
}

type SettingRangeConnection {
  pageInfo: PageInfo!
  edges: [SettingRangeEdge]!
  aggregate: AggregateSettingRange!
}

input SettingRangeCreateInput {
  id: ID
  measurement: MeasurementFormat!
  min: Float!
  max: Float!
}

input SettingRangeCreateManyInput {
  create: [SettingRangeCreateInput!]
  connect: [SettingRangeWhereUniqueInput!]
}

type SettingRangeEdge {
  node: SettingRange!
  cursor: String!
}

enum SettingRangeOrderByInput {
  id_ASC
  id_DESC
  measurement_ASC
  measurement_DESC
  min_ASC
  min_DESC
  max_ASC
  max_DESC
}

type SettingRangePreviousValues {
  id: ID!
  measurement: MeasurementFormat!
  min: Float!
  max: Float!
}

input SettingRangeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  measurement: MeasurementFormat
  measurement_not: MeasurementFormat
  measurement_in: [MeasurementFormat!]
  measurement_not_in: [MeasurementFormat!]
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  max: Float
  max_not: Float
  max_in: [Float!]
  max_not_in: [Float!]
  max_lt: Float
  max_lte: Float
  max_gt: Float
  max_gte: Float
  AND: [SettingRangeScalarWhereInput!]
  OR: [SettingRangeScalarWhereInput!]
  NOT: [SettingRangeScalarWhereInput!]
}

type SettingRangeSubscriptionPayload {
  mutation: MutationType!
  node: SettingRange
  updatedFields: [String!]
  previousValues: SettingRangePreviousValues
}

input SettingRangeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SettingRangeWhereInput
  AND: [SettingRangeSubscriptionWhereInput!]
  OR: [SettingRangeSubscriptionWhereInput!]
  NOT: [SettingRangeSubscriptionWhereInput!]
}

input SettingRangeUpdateDataInput {
  measurement: MeasurementFormat
  min: Float
  max: Float
}

input SettingRangeUpdateInput {
  measurement: MeasurementFormat
  min: Float
  max: Float
}

input SettingRangeUpdateManyDataInput {
  measurement: MeasurementFormat
  min: Float
  max: Float
}

input SettingRangeUpdateManyInput {
  create: [SettingRangeCreateInput!]
  update: [SettingRangeUpdateWithWhereUniqueNestedInput!]
  upsert: [SettingRangeUpsertWithWhereUniqueNestedInput!]
  delete: [SettingRangeWhereUniqueInput!]
  connect: [SettingRangeWhereUniqueInput!]
  set: [SettingRangeWhereUniqueInput!]
  disconnect: [SettingRangeWhereUniqueInput!]
  deleteMany: [SettingRangeScalarWhereInput!]
  updateMany: [SettingRangeUpdateManyWithWhereNestedInput!]
}

input SettingRangeUpdateManyMutationInput {
  measurement: MeasurementFormat
  min: Float
  max: Float
}

input SettingRangeUpdateManyWithWhereNestedInput {
  where: SettingRangeScalarWhereInput!
  data: SettingRangeUpdateManyDataInput!
}

input SettingRangeUpdateWithWhereUniqueNestedInput {
  where: SettingRangeWhereUniqueInput!
  data: SettingRangeUpdateDataInput!
}

input SettingRangeUpsertWithWhereUniqueNestedInput {
  where: SettingRangeWhereUniqueInput!
  update: SettingRangeUpdateDataInput!
  create: SettingRangeCreateInput!
}

input SettingRangeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  measurement: MeasurementFormat
  measurement_not: MeasurementFormat
  measurement_in: [MeasurementFormat!]
  measurement_not_in: [MeasurementFormat!]
  min: Float
  min_not: Float
  min_in: [Float!]
  min_not_in: [Float!]
  min_lt: Float
  min_lte: Float
  min_gt: Float
  min_gte: Float
  max: Float
  max_not: Float
  max_in: [Float!]
  max_not_in: [Float!]
  max_lt: Float
  max_lte: Float
  max_gt: Float
  max_gte: Float
  AND: [SettingRangeWhereInput!]
  OR: [SettingRangeWhereInput!]
  NOT: [SettingRangeWhereInput!]
}

input SettingRangeWhereUniqueInput {
  id: ID
}

type SettingSubscriptionPayload {
  mutation: MutationType!
  node: Setting
  updatedFields: [String!]
  previousValues: SettingPreviousValues
}

input SettingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SettingWhereInput
  AND: [SettingSubscriptionWhereInput!]
  OR: [SettingSubscriptionWhereInput!]
  NOT: [SettingSubscriptionWhereInput!]
}

input SettingUpdateInput {
  subjects: SettingRangeUpdateManyInput
  appliedBy: UserUpdateOneRequiredInput
}

input SettingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  subjects_every: SettingRangeWhereInput
  subjects_some: SettingRangeWhereInput
  subjects_none: SettingRangeWhereInput
  appliedBy: UserWhereInput
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
}

input SettingWhereUniqueInput {
  id: ID
}

type Subscription {
  authPayload(where: AuthPayloadSubscriptionWhereInput): AuthPayloadSubscriptionPayload
  figure(where: FigureSubscriptionWhereInput): FigureSubscriptionPayload
  setting(where: SettingSubscriptionWhereInput): SettingSubscriptionPayload
  settingRange(where: SettingRangeSubscriptionWhereInput): SettingRangeSubscriptionPayload
  switch(where: SwitchSubscriptionWhereInput): SwitchSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Switch {
  id: ID!
  machine: SwitchFormat!
  updatedAt: DateTime
  status: Boolean!
  controledBy: User
}

type SwitchConnection {
  pageInfo: PageInfo!
  edges: [SwitchEdge]!
  aggregate: AggregateSwitch!
}

input SwitchCreateInput {
  id: ID
  machine: SwitchFormat!
  status: Boolean!
  controledBy: UserCreateOneWithoutSwitchesInput
}

input SwitchCreateManyWithoutControledByInput {
  create: [SwitchCreateWithoutControledByInput!]
  connect: [SwitchWhereUniqueInput!]
}

input SwitchCreateWithoutControledByInput {
  id: ID
  machine: SwitchFormat!
  status: Boolean!
}

type SwitchEdge {
  node: Switch!
  cursor: String!
}

enum SwitchFormat {
  FAN
  HUMIDIFIER
  LED
}

enum SwitchOrderByInput {
  id_ASC
  id_DESC
  machine_ASC
  machine_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
}

type SwitchPreviousValues {
  id: ID!
  machine: SwitchFormat!
  updatedAt: DateTime
  status: Boolean!
}

input SwitchScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  machine: SwitchFormat
  machine_not: SwitchFormat
  machine_in: [SwitchFormat!]
  machine_not_in: [SwitchFormat!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: Boolean
  status_not: Boolean
  AND: [SwitchScalarWhereInput!]
  OR: [SwitchScalarWhereInput!]
  NOT: [SwitchScalarWhereInput!]
}

type SwitchSubscriptionPayload {
  mutation: MutationType!
  node: Switch
  updatedFields: [String!]
  previousValues: SwitchPreviousValues
}

input SwitchSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SwitchWhereInput
  AND: [SwitchSubscriptionWhereInput!]
  OR: [SwitchSubscriptionWhereInput!]
  NOT: [SwitchSubscriptionWhereInput!]
}

input SwitchUpdateInput {
  machine: SwitchFormat
  status: Boolean
  controledBy: UserUpdateOneWithoutSwitchesInput
}

input SwitchUpdateManyDataInput {
  machine: SwitchFormat
  status: Boolean
}

input SwitchUpdateManyMutationInput {
  machine: SwitchFormat
  status: Boolean
}

input SwitchUpdateManyWithoutControledByInput {
  create: [SwitchCreateWithoutControledByInput!]
  delete: [SwitchWhereUniqueInput!]
  connect: [SwitchWhereUniqueInput!]
  set: [SwitchWhereUniqueInput!]
  disconnect: [SwitchWhereUniqueInput!]
  update: [SwitchUpdateWithWhereUniqueWithoutControledByInput!]
  upsert: [SwitchUpsertWithWhereUniqueWithoutControledByInput!]
  deleteMany: [SwitchScalarWhereInput!]
  updateMany: [SwitchUpdateManyWithWhereNestedInput!]
}

input SwitchUpdateManyWithWhereNestedInput {
  where: SwitchScalarWhereInput!
  data: SwitchUpdateManyDataInput!
}

input SwitchUpdateWithoutControledByDataInput {
  machine: SwitchFormat
  status: Boolean
}

input SwitchUpdateWithWhereUniqueWithoutControledByInput {
  where: SwitchWhereUniqueInput!
  data: SwitchUpdateWithoutControledByDataInput!
}

input SwitchUpsertWithWhereUniqueWithoutControledByInput {
  where: SwitchWhereUniqueInput!
  update: SwitchUpdateWithoutControledByDataInput!
  create: SwitchCreateWithoutControledByInput!
}

input SwitchWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  machine: SwitchFormat
  machine_not: SwitchFormat
  machine_in: [SwitchFormat!]
  machine_not_in: [SwitchFormat!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: Boolean
  status_not: Boolean
  controledBy: UserWhereInput
  AND: [SwitchWhereInput!]
  OR: [SwitchWhereInput!]
  NOT: [SwitchWhereInput!]
}

input SwitchWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  password: String!
  createdAt: DateTime!
  switches(where: SwitchWhereInput, orderBy: SwitchOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Switch!]
  type: UserFormat!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  password: String!
  switches: SwitchCreateManyWithoutControledByInput
  type: UserFormat!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSwitchesInput {
  create: UserCreateWithoutSwitchesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSwitchesInput {
  id: ID
  name: String!
  password: String!
  type: UserFormat!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserFormat {
  USER
  ADMIN
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  password: String!
  createdAt: DateTime!
  type: UserFormat!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  password: String
  switches: SwitchUpdateManyWithoutControledByInput
  type: UserFormat
}

input UserUpdateInput {
  name: String
  password: String
  switches: SwitchUpdateManyWithoutControledByInput
  type: UserFormat
}

input UserUpdateManyMutationInput {
  name: String
  password: String
  type: UserFormat
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSwitchesInput {
  create: UserCreateWithoutSwitchesInput
  update: UserUpdateWithoutSwitchesDataInput
  upsert: UserUpsertWithoutSwitchesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutSwitchesDataInput {
  name: String
  password: String
  type: UserFormat
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutSwitchesInput {
  update: UserUpdateWithoutSwitchesDataInput!
  create: UserCreateWithoutSwitchesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  switches_every: SwitchWhereInput
  switches_some: SwitchWhereInput
  switches_none: SwitchWhereInput
  type: UserFormat
  type_not: UserFormat
  type_in: [UserFormat!]
  type_not_in: [UserFormat!]
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    