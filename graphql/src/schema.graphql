scalar DateTime 

type Query {
    info : String!
    feed : [Switch!]!
}

type Mutation {
    switchControl(machine: SwitchFormat!, status: Boolean!): Switch
    measure(value: Float!, measurement: measurementFormat!): Figure
    signup(name:String!, password:String!): AuthPayload
    login(name:String!, password:String!): AuthPayload
}

type Subscription {
  newSwitch: Switch
  newFigure: Figure
}

enum measurementFormat {
  LUX
  HUM
  TEMP
  CO2
  PH
  EC
}

enum SwitchFormat {
  FAN
  HUMIDIFIER
  LED
}

type AuthPayload {
  id : ID!
  token : String
  user : User
}

type Figure {
  id : ID! 
  updatedAt : DateTime! 
  value : Float!
  measurement : measurementFormat! 
}

type Switch {
  id : ID! 
  machine : SwitchFormat!
  updatedAt : DateTime 
  status : Boolean!
  controledBy : User
}

type User {
  id: ID! 
  name: String! 
  password: String!
  createdAt : DateTime! 
  switches : [Switch!]!
}